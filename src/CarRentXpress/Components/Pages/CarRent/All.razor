@page "/cars/rents"
@using CarRentXpress.Application.Entities
@using CarRentXpress.Application.Services
@using CarRentXpress.Components.Dialog
@using CarRentXpress.Core.Enums
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject NavigationManager NavigationManager
@inject ICarRentService CarRentService
@inject IDialogService DialogService
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IHttpContextAccessor HttpContextAccessor

@attribute [Authorize]

<MudStack Spacing="2">
    @foreach (var carRentDto in carRentDtos)
    {
        if (carRentDto.Car is null)
        {
            continue;
        }
        
        <MudCard Class="d-flex align-items-center p-2 justify-between">
            <div class="d-flex gap-4 align-items-center flex-grow-1">
                <MudImage Src="@carRentDto.Car.ImgUrl" Elevation="25" Width="240" Height="160" Class="rounded-lg"></MudImage>

                <MudCardContent>
                    <MudText Typo="Typo.h6">@carRentDto.Car.Brand @carRentDto.Car.Model</MudText>
                    <MudText Typo="Typo.body2">Year: @carRentDto.Car.Year</MudText>
                    <MudText Typo="Typo.body2">Seats: @carRentDto.Car.Seats</MudText>
                    <MudText Typo="Typo.body2">Price per day: €@carRentDto.Car.PricePerDay</MudText>
                    <MudText Typo="Typo.body2">Rent start date: @carRentDto.StartDate.ToString("d")</MudText>
                    <MudText Typo="Typo.body2">Rent end date: @carRentDto.EndDate.ToString("d")</MudText>
                    <MudText Typo="Typo.body2">Rented by: @carRentDto.User.FirstName @carRentDto.User.LastName</MudText>
                </MudCardContent>
            </div>
            
            <div class="d-flex gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => NavigationManager.NavigateTo($"/cars/rent/edit/{carRentDto.Id}"))">
                    Edit Car Rent
                </MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => OpenDeleteDialog(carRentDto))">
                    Delete Car Rent
                </MudButton>
            </div>
        </MudCard>
    }
</MudStack>

@code {
    private List<CarRentDto> carRentDtos = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        var roles = await UserManager.GetRolesAsync(user).ConfigureAwait(false);
        if (roles.Contains(Role.Admin))
        {
            carRentDtos = await CarRentService.GetAllCarRentsAsync();
        }
        else
        {
            carRentDtos = CarRentService.GetAllCarRentsAsync().Result.Where(r => r.User == user).ToList();
        }
    }
    
    private async Task OpenDeleteDialog(CarRentDto carRent)
    {
        var parameters = new DialogParameters<DeleteCarRentDialog> { { x => x.CarRent, carRent } };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<DeleteCarRentDialog>($"Delete car rent?", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            carRentDtos = await CarRentService.GetAllCarRentsAsync();
        }
    }
}
