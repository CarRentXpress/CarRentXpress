@page "/cars/rent/{id}"
@using System.Security.Claims
@using AutoMapper
@using CarRentXpress.Application.Entities
@using CarRentXpress.Application.Services
@using CarRentXpress.Application.Services.Interfaces
@using CarRentXpress.Core.Enums
@using CarRentXpress.DTOs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@inject ICarService CarService
@inject NavigationManager NavigationManager
@inject ICarRentService CarRentService
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IMapper mapper
@inject ISnackbar Snackbar

@attribute [Authorize]

<PageTitle>Rent Car</PageTitle>


<AuthorizeView>
    <MudPaper Class="p-4">
        @if (car == null)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary"/>
        }
        else
        {
            <MudStack Spacing="3">
                <MudText Typo="Typo.h4">@car.Brand @car.Model</MudText>

                <MudImage Src="@car.ImgUrl" Alt="Car Image" Width="240" Height="160" Class="rounded-lg" Elevation="25"/>

                <MudText Typo="Typo.body1"><b>Year:</b> @car.Year</MudText>
                <MudText Typo="Typo.body1"><b>Seats:</b> @car.Seats</MudText>
                <MudText Typo="Typo.body1"><b>Description:</b> @car.Description</MudText>
                <MudText Typo="Typo.body1"><b>Price per day:</b> €@car.PricePerDay</MudText>

                <!-- Date Range Picker for selecting rental dates -->
                <MudDateRangePicker @bind-DateRange="SelectedDateRange" Label="Select rental period"/>

                @if (totalPrice > 0)
                {
                    <MudText Typo="Typo.h6"><b>Total Price: €@totalPrice</b></MudText>
                }

                <MudStack Direction="Row" Spacing="2">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoBack">Back to List</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SubmitRent">Rent</MudButton>
                </MudStack>
            </MudStack>
        }
    </MudPaper>
</AuthorizeView>

@code {
    [Parameter] public string Id { get; set; }

    private CarDto? car;
    private DateRange _selectedDateRange = new DateRange();
    private DateRange SelectedDateRange
    {
        get => _selectedDateRange;
        set
        {
            if (_selectedDateRange != value)
            {
                _selectedDateRange = value;
                OnDateRangeChange();
            }
        }
    }
    private decimal totalPrice;

    protected override async Task OnInitializedAsync()
    {
        car = await CarService.GetCarByIdAsync(Id);
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/cars");
    }

    private async Task OnDateRangeChange()
    {
        if (SelectedDateRange.Start.HasValue && SelectedDateRange.End.HasValue)
        {
            var startDate = SelectedDateRange.Start.Value;
            var endDate = SelectedDateRange.End.Value;
            var rentalDays = (endDate - startDate).Days + 1;

            totalPrice = rentalDays * car.PricePerDay;
        }
    }
    
    private async Task SubmitRent()
    {
        if (SelectedDateRange.Start.HasValue && SelectedDateRange.End.HasValue)
        {
            var startDate = SelectedDateRange.Start.Value;
            var endDate = SelectedDateRange.End.Value;

            var user = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);

            // Check availability before renting
            var isAvailable = await CarRentService.IsCarAvailableAsync(car.Id, startDate, endDate);
            if (!isAvailable)
            {
                Snackbar.Add("Car is not available in the selected date range!", Severity.Error);
                Console.WriteLine("Car is not available in the selected date range.");
                return;
            }

            var rent = new CarRentDto
            {
                CarId = car.Id, User = user, StartDate = startDate, EndDate = endDate, Price = totalPrice
            };

            await CarRentService.RentCarAsync(rent);
            Console.WriteLine("Rented successfully!");
            NavigationManager.NavigateTo("/cars");
        }
    }

}
